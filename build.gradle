plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.avast.gradle.docker-compose' version '0.17.5'
}

group = 'genai.idea'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    //maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

ext {
    set('springAiVersion', "1.0.0-M2")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.ai:spring-ai-ollama-spring-boot-starter'
    implementation 'org.springframework.ai:spring-ai-pgvector-store'
    implementation 'org.hibernate:hibernate-core:6.5.2.Final'
    implementation 'com.pgvector:pgvector:0.1.6'
    //implementation 'org.gradle:gradle-tooling-api:7.6'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'org.postgresql:postgresql'

    testRuntimeOnly 'org.xerial:sqlite-jdbc'
    testImplementation 'org.hibernate.orm:hibernate-community-dialects'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

dockerCompose {
    useComposeFiles = ['docker-compose.yml']
    startedServices = ['postgres-db']
    stopContainers = true  // 컨테이너를 중지
    removeContainers = true  // 컨테이너를 제거
    removeVolumes = true  // 볼륨을 제거
    removeOrphans = true  // 고아 컨테이너를 제거
    captureContainersOutput = true
    checkContainersRunning = true  // 컨테이너가 실행 중인지 확인
}

tasks.named('processResources') {
    dependsOn tasks.named('composeUp')
}

tasks.named('bootRun') {
    dependsOn tasks.named('composeUp')
}

tasks.named('test') {
    useJUnitPlatform()
    dependsOn tasks.named('composeUp')
}

tasks.named('composeUp') {
    doFirst {
        println 'composeUp Start'
    }
    doLast {
        println 'composeUp Finish'
    }
}

tasks.named('composeDown') {
    doFirst {
        println 'composeDown Start'
    }
    doLast {
        exec {
            commandLine 'docker-compose', '-f', 'docker-compose.yml', 'down', '--volumes', '--remove-orphans'
        }
        println 'composeDown Finish'
    }
}